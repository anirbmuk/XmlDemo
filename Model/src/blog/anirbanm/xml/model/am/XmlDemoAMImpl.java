package blog.anirbanm.xml.model.am;

import blog.anirbanm.xml.model.am.common.XmlDemoAM;
import blog.anirbanm.xml.model.schema.Customxml;
import blog.anirbanm.xml.model.schema.ObjectFactory;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import javax.xml.transform.dom.DOMResult;

import oracle.jbo.XMLInterface;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.xml.parser.v2.XMLNode;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 24 09:57:36 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XmlDemoAMImpl extends ApplicationModuleImpl implements XmlDemoAM {
    /**
     * This is the default constructor (do not remove).
     */
    public XmlDemoAMImpl() {
    }
    
    public void printXml(final String type) {
        prettyPrintXml(type);
    }
    
    private void prettyPrintXml(String type) {
        if (type == null || type.isEmpty()) {
            type = "STANDARD";
        }
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            if (("STANDARD").equals(type)) {
                ((XMLNode)getStandardXml()).print(baos);
            } else if (("CUSTOM").equals(type)) {
                ((XMLNode)getCustomXml()).print(baos);
            } else if (("COMPOSITE").equals(type)) {
                ((XMLNode)getCompositeXml()).print(baos);
            }
            System.out.println(baos.toString());
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
    
    private Node getStandardXml() {
        getdepartments().executeQuery();
        return getdepartments().writeXML(1, XMLInterface.XML_OPT_ALL_ROWS);
    }
    
    private Node getCustomXml() {
        final Customxml customxml = getCustomxml();
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbBuilder = null;
        Document document = null;
        
        try {
            dbBuilder = dbFactory.newDocumentBuilder();
            document = dbBuilder.newDocument();
            
            JAXBContext jaxbContext = JAXBContext.newInstance("blog.anirbanm.xml.model.schema");
            Marshaller marshaller = jaxbContext.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
            marshaller.marshal(customxml, document);
        } catch (JAXBException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }

        return document.getDocumentElement();
    }
    
    private Node getCompositeXml() {
        final Node a = getCustomXml();
        final Node b = getStandardXml();
        
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbBuilder = null;
        Document document = null;
        Element root = null;
        
        try {
            dbBuilder = dbFactory.newDocumentBuilder();
            document = dbBuilder.newDocument();
            
            root = document.createElementNS("https://adfsolutions.anirbanblogs.com", "composite");
            document.appendChild(root);
            
            Node aa = document.importNode(a, true);
            Node bb = document.importNode(b, true);
            
            root.appendChild(aa);
            root.appendChild(bb);
            
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        
        return root;
    }
    
    private Customxml getCustomxml() {
        final ObjectFactory factory = new ObjectFactory();
        final Customxml customxml = factory.createCustomxml();
        final Customxml.Xmlnodes xmlnodes = factory.createCustomxmlXmlnodes();
        
        final Customxml.Xmlnodes.Xmlnode xmlnode1 = factory.createCustomxmlXmlnodesXmlnode();
        xmlnode1.setName("author");
        xmlnode1.setValue("anirbanm");
        xmlnodes.getXmlnode().add(xmlnode1);
        
        final Customxml.Xmlnodes.Xmlnode xmlnode2 = factory.createCustomxmlXmlnodesXmlnode();
        xmlnode2.setName("timestamp");
        xmlnode2.setValue((new Date()).toString());
        xmlnodes.getXmlnode().add(xmlnode2);
        
        final Customxml.Xmlnodes.Xmlnode xmlnode3 = factory.createCustomxmlXmlnodesXmlnode();
        xmlnode3.setName("version");
        xmlnode3.setValue("1.0");
        xmlnodes.getXmlnode().add(xmlnode3);
        
        customxml.setXmlnodes(xmlnodes);
        
        return customxml;
    }

    /**
     * Container's getter for DepartmentsVO1.
     * @return DepartmentsVO1
     */
    public ViewObjectImpl getdepartments() {
        return (ViewObjectImpl) findViewObject("departments");
    }

    /**
     * Container's getter for EmployeesVO1.
     * @return EmployeesVO1
     */
    public ViewObjectImpl getemployees() {
        return (ViewObjectImpl) findViewObject("employees");
    }

    /**
     * Container's getter for DepartmentToEmployeesVL1.
     * @return DepartmentToEmployeesVL1
     */
    public ViewLinkImpl getDepartmentToEmployeesVL1() {
        return (ViewLinkImpl) findViewLink("DepartmentToEmployeesVL1");
    }
}

